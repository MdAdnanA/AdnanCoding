/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.text.Collator;
import java.util.*;
import java.util.stream.Collector;
import java.util.stream.Collectors;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {
  List <Employee> eList = new ArrayList<>();
  Employee e1 =new Employee(1,"ad1",41,"M","Science",1021,20000.00);
  Employee e2 =new Employee(2,"ad2",42,"F","Arts",2022,20000.00);
  Employee e3 =new Employee(3,"ad3",43,"M","Science",2023,30000.00);
  Employee e4 =new Employee(4,"ad4",44,"F","Commerce",2024,40000.00);

  Employee e5 =new Employee(5,"ad5",41,"F","Commerce",2025,50000.00);
  Employee e6 =new Employee(6,"ad6",42,"M","Arts",2024,60000.00);
  Employee e7 =new Employee(7,"ad7",42,"F","Science",2023,40000.00);
  Employee e8 =new Employee(8,"ad8",41,"F","Commerce",2024,40000.00);
  Employee e9 =new Employee(9,"ad9",43,"M","Arts",2023,50000.00);
  Employee e10 =new Employee(10,"ad10",41,"F","Commerce",2022,40000.00);
  Employee e11 =new Employee(11,"ad11",43,"M","Arts",2024,30000.00);

  eList.add(e1);
  eList.add(e2);
  eList.add(e3);
  eList.add(e4);
  eList.add(e5);
  eList.add(e6);
  eList.add(e7);
  eList.add(e8);
  eList.add(e9);
  eList.add(e10);
  eList.add(e11);
  


  //  Map<String, Long> m=eList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.counting()));
  // System.out.println(m);

  //  eList.stream().map(Employee::getDepartment).distinct().forEach(e->System.out.println(e));

  // Map<Object, Double> m2= eList.stream().collect(Collectors.groupingBy(e->e.getGender(),Collectors.averagingInt(Employee::getAge)));
  // System.out.println(m2);

  //  eList.stream().filter(e->e.getYearOfJoining()>2023).map(e->e.getName()).forEach(e->System.out.println(e));

  // Map <String,Long> e =eList.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.counting()));
  // System.out.println(e);
   
  //  Map <String ,Double>e =eList.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.averagingDouble(Employee::getSalary)));
  //  System.out.println(e);
  


  }

}

class Employee{
  private int id;
  private String name;
  private int age;
  private String gender;
  private String department;
  private int yearOfJoining;
  private double salary;

  Employee(int id, String name, int age,String gender,String department,int yearOfJoining,double salary){
    this.id = id;
    this.name= name;
    this.age= age;
    this.gender=gender;
    this.department= department;
    this.yearOfJoining= yearOfJoining;
    this.salary=salary;

  }

   public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    // Getter and Setter for name
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // Getter and Setter for age
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    // Getter and Setter for gender
    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    // Getter and Setter for department
    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    // Getter and Setter for yearOfJoining
    public int getYearOfJoining() {
        return yearOfJoining;
    }

    public void setYearOfJoining(int yearOfJoining) {
        this.yearOfJoining = yearOfJoining;
    }

    // Getter and Setter for salary
    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }


 

}
